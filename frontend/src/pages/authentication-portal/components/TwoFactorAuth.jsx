import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Shield, Smartphone, Copy, Check, Download, ArrowRight } from 'lucide-react';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';

const TwoFactorAuth = ({ onSetupComplete, onSkip }) => {
  const [step, setStep] = useState(1); // 1: intro, 2: qr-code, 3: verify, 4: backup-codes
  const [verificationCode, setVerificationCode] = useState('');
  const [backupCodes, setBackupCodes] = useState([]);
  const [copiedCodes, setCopiedCodes] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  // Mock QR code data - in real app, this would come from your backend
  const qrCodeData = "otpauth://totp/JokeVault:user@example.com?secret=JBSWY3DPEHPK3PXP&issuer=JokeVault";
  const secretKey = "JBSWY3DPEHPK3PXP";

  // Mock backup codes - in real app, these would be generated by your backend
  const mockBackupCodes = [
    "1a2b-3c4d", "5e6f-7g8h", "9i0j-1k2l",
    "3m4n-5o6p", "7q8r-9s0t", "1u2v-3w4x",
    "5y6z-7a8b", "9c0d-1e2f", "3g4h-5i6j",
    "7k8l-9m0n"
  ];

  const handleQRStep = () => {
    setStep(2);
  };

  const handleVerifyCode = async (e) => {
    e?.preventDefault();
    if (!verificationCode || verificationCode?.length !== 6) {
      setError('Please enter a 6-digit code');
      return;
    }

    setIsLoading(true);
    setError('');
    
    // Simulate API verification
    setTimeout(() => {
      setIsLoading(false);
      if (verificationCode === '123456') { // Mock successful code
        setBackupCodes(mockBackupCodes);
        setStep(4);
      } else {
        setError('Invalid code. Please try again.');
      }
    }, 1500);
  };

  const copyBackupCodes = async () => {
    try {
      await navigator.clipboard?.writeText(backupCodes?.join('\n'));
      setCopiedCodes(true);
      setTimeout(() => setCopiedCodes(false), 2000);
    } catch (err) {
      console.error('Failed to copy codes:', err);
    }
  };

  const downloadBackupCodes = () => {
    const content = `JokeVault 2FA Backup Codes
Generated: ${new Date()?.toLocaleString()}

These codes can be used to access your account if you lose access to your authenticator app.
Each code can only be used once.

${backupCodes?.join('\n')}

Keep these codes in a safe place!`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'jokevault-backup-codes.txt';
    a?.click();
    URL.revokeObjectURL(url);
  };

  if (step === 1) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="space-y-6"
      >
        <div className="text-center space-y-4">
          <motion.div
            className="mx-auto w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center"
            animate={{ scale: [1, 1.1, 1] }}
            transition={{ duration: 2, repeat: Infinity }}
          >
            <Shield className="w-8 h-8 text-primary" />
          </motion.div>
          
          <div>
            <h3 className="text-xl font-semibold text-foreground">
              Secure Your Account
            </h3>
            <p className="text-muted-foreground mt-2">
              Add an extra layer of security with two-factor authentication
            </p>
          </div>
        </div>
        <div className="space-y-4">
          <div className="flex items-start space-x-3 p-4 bg-muted/30 rounded-lg">
            <Shield className="w-5 h-5 text-primary mt-0.5 flex-shrink-0" />
            <div>
              <p className="font-medium text-foreground">Enhanced Security</p>
              <p className="text-sm text-muted-foreground">
                Protect your jokes and personal data with 2FA
              </p>
            </div>
          </div>

          <div className="flex items-start space-x-3 p-4 bg-muted/30 rounded-lg">
            <Smartphone className="w-5 h-5 text-primary mt-0.5 flex-shrink-0" />
            <div>
              <p className="font-medium text-foreground">Easy Setup</p>
              <p className="text-sm text-muted-foreground">
                Use any authenticator app like Google Authenticator or Authy
              </p>
            </div>
          </div>
        </div>
        <div className="space-y-3">
          <Button
            onClick={handleQRStep}
            variant="default"
            size="lg"
            fullWidth
            iconName="Shield"
            className="comedy-timing hover-lift"
          >
            Set Up 2FA
          </Button>
          
          <Button
            onClick={onSkip}
            variant="ghost"
            fullWidth
            className="text-muted-foreground"
          >
            Skip for now
          </Button>
        </div>
      </motion.div>
    );
  }

  if (step === 2) {
    return (
      <motion.div
        initial={{ opacity: 0, x: 20 }}
        animate={{ opacity: 1, x: 0 }}
        className="space-y-6"
      >
        <div className="text-center space-y-2">
          <h3 className="text-xl font-semibold text-foreground">
            Scan QR Code
          </h3>
          <p className="text-muted-foreground text-sm">
            Use your authenticator app to scan this QR code
          </p>
        </div>
        <div className="flex justify-center">
          <div className="bg-white p-4 rounded-lg">
            {/* In a real app, you'd use a QR code library */}
            <div className="w-48 h-48 bg-gray-100 flex items-center justify-center rounded">
              <div className="text-center text-gray-500">
                <Smartphone className="w-12 h-12 mx-auto mb-2" />
                <p className="text-sm">QR Code</p>
                <p className="text-xs">Scan with your app</p>
              </div>
            </div>
          </div>
        </div>
        <div className="space-y-3">
          <div className="bg-muted/30 rounded-lg p-4">
            <p className="text-sm font-medium text-foreground mb-2">
              Can't scan? Enter this code manually:
            </p>
            <div className="flex items-center justify-between bg-background rounded px-3 py-2 border">
              <code className="text-sm font-mono">{secretKey}</code>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => navigator.clipboard?.writeText(secretKey)}
                iconName="Copy"
              >
              </Button>
            </div>
          </div>

          <Button
            onClick={() => setStep(3)}
            variant="default"
            size="lg"
            fullWidth
            iconName="ArrowRight"
            iconPosition="right"
            className="comedy-timing hover-lift"
          >
            I've Added the Account
          </Button>
        </div>
      </motion.div>
    );
  }

  if (step === 3) {
    return (
      <motion.div
        initial={{ opacity: 0, x: 20 }}
        animate={{ opacity: 1, x: 0 }}
        className="space-y-6"
      >
        <div className="text-center space-y-2">
          <h3 className="text-xl font-semibold text-foreground">
            Verify Setup
          </h3>
          <p className="text-muted-foreground text-sm">
            Enter the 6-digit code from your authenticator app
          </p>
        </div>
        <form onSubmit={handleVerifyCode} className="space-y-4">
          <Input
            type="text"
            inputMode="numeric"
            placeholder="000000"
            value={verificationCode}
            onChange={(e) => {
              const value = e?.target?.value?.replace(/\D/g, '')?.slice(0, 6);
              setVerificationCode(value);
              setError('');
            }}
            error={error}
            className="text-center text-2xl font-mono tracking-wider"
            maxLength={6}
          />

          <Button
            type="submit"
            variant="default"
            size="lg"
            fullWidth
            loading={isLoading}
            disabled={verificationCode?.length !== 6}
            iconName="Shield"
            className="comedy-timing hover-lift"
          >
            Verify Code
          </Button>
        </form>
        <div className="text-center">
          <button
            onClick={() => setStep(2)}
            className="text-sm text-muted-foreground hover:text-foreground transition-colors"
          >
            Back to QR Code
          </button>
        </div>
      </motion.div>
    );
  }

  if (step === 4) {
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="space-y-6"
      >
        <div className="text-center space-y-2">
          <motion.div
            className="mx-auto w-16 h-16 bg-green-500/10 rounded-full flex items-center justify-center"
            animate={{ scale: [1, 1.1, 1] }}
            transition={{ duration: 1 }}
          >
            <Check className="w-8 h-8 text-green-500" />
          </motion.div>
          
          <h3 className="text-xl font-semibold text-foreground">
            2FA Setup Complete!
          </h3>
          <p className="text-muted-foreground text-sm">
            Save these backup codes in case you lose access to your authenticator
          </p>
        </div>
        <div className="bg-muted/30 rounded-lg p-4 space-y-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-foreground">
              Backup Codes
            </span>
            <div className="flex space-x-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={copyBackupCodes}
                iconName={copiedCodes ? "Check" : "Copy"}
                className="text-xs"
              >
                {copiedCodes ? 'Copied!' : 'Copy'}
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={downloadBackupCodes}
                iconName="Download"
                className="text-xs"
              >
                Download
              </Button>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-2 max-h-32 overflow-y-auto">
            {backupCodes?.map((code, index) => (
              <div
                key={index}
                className="bg-background rounded px-2 py-1 text-sm font-mono text-center border"
              >
                {code}
              </div>
            ))}
          </div>
        </div>
        <div className="bg-yellow-500/10 border border-yellow-500/20 rounded-lg p-4">
          <p className="text-sm text-foreground">
            <strong>Important:</strong> Store these codes safely! Each can only be used once to access your account if you lose your authenticator device.
          </p>
        </div>
        <Button
          onClick={onSetupComplete}
          variant="default"
          size="lg"
          fullWidth
          iconName="ArrowRight"
          iconPosition="right"
          className="comedy-timing hover-lift"
        >
          Continue to Privacy Settings
        </Button>
      </motion.div>
    );
  }
};

export default TwoFactorAuth;